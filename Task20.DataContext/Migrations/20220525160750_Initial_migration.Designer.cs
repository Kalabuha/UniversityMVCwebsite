// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Task20.DataContext.DataBaseContext;

#nullable disable

namespace Task20.DataContext.Migrations
{
    [DbContext(typeof(UniversityDbContext))]
    [Migration("20220525160750_Initial_migration")]
    partial class Initial_migration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-preview.4.22229.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Task20.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("Creation_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("Description");

                    b.Property<int?>("LeaderId")
                        .HasColumnType("int")
                        .HasColumnName("Leader_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("LeaderId")
                        .IsUnique()
                        .HasFilter("[Leader_id] IS NOT NULL");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Task20.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("Course_id");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("Creation_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("Description");

                    b.Property<int?>("LeaderId")
                        .HasColumnType("int")
                        .HasColumnName("Leader_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("LeaderId")
                        .IsUnique()
                        .HasFilter("[Leader_id] IS NOT NULL");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Task20.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateAdmission")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date_admission_to_university");

                    b.Property<DateTime>("DateBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date_birth");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("Group_id");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Last_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<string>("SacondName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Sacond_name");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Task20.Entities.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date_birth");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("Experience");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Last_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<string>("SacondName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Sacond_name");

                    b.HasKey("Id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("Task20.Entities.Course", b =>
                {
                    b.HasOne("Task20.Entities.Teacher", "Leader")
                        .WithOne("Course")
                        .HasForeignKey("Task20.Entities.Course", "LeaderId");

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("Task20.Entities.Group", b =>
                {
                    b.HasOne("Task20.Entities.Course", "Course")
                        .WithMany("Groups")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Task20.Entities.Teacher", "Leader")
                        .WithOne("Group")
                        .HasForeignKey("Task20.Entities.Group", "LeaderId");

                    b.Navigation("Course");

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("Task20.Entities.Student", b =>
                {
                    b.HasOne("Task20.Entities.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Task20.Entities.Course", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Task20.Entities.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Task20.Entities.Teacher", b =>
                {
                    b.Navigation("Course");

                    b.Navigation("Group");
                });
#pragma warning restore 612, 618
        }
    }
}
